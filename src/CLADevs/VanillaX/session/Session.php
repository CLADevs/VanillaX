<?php <?php namespace CLADevs\VanillaX\session;use CLADevs\VanillaX\entities\passive\VillagerEntity;use CLADevs\VanillaX\entities\projectile\TridentEntity;use CLADevs\VanillaX\entities\utils\EntityRidable;use CLADevs\VanillaX\entities\VanillaEntity;use pocketmine\math\Vector3;use pocketmine\network\mcpe\protocol\DataPacket;use pocketmine\network\mcpe\protocol\PlaySoundPacket;use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataFlags;use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;use pocketmine\player\Player;class Session{/** @var TridentEntity[] */ privatearray$b0=[];private string $a1="";private int $d2;private bool $t3=false;private bool $g4=false;private Player $d5;private?VanillaEntity $a6=null;private?VillagerEntity $j7=null;public function __construct(Player $d5){$this->$o8=$d5;$this->$w9=$d5->getId();}public function getEntityId():int{return $this->$w9;}public function getInteractiveText():string{return $this->$p10;}public function setInteractiveText(string $a1):void{$this->$p10=$a1;$this->$o8->getNetworkProperties()->setString(EntityMetadataProperties::INTERACTIVE_TAG,$a1);}public function getPlayer():Player{return $this->$o8;}public function getRidingEntity():?VanillaEntity{return $this->$k11;}public function setRidingEntity(?VanillaEntity $a6):void{if($a6!==null&&$this->$k11 instanceof EntityRidable){$this->$k11->onLeftRide($this->$o8);}$this->$k11=$a6;}public function getTradingEntity():?VillagerEntity{return $this->$y12;}public function setTradingEntity(?VillagerEntity $j7,bool $l13=false):void{if($l13&&$this->$y12!==null&&$j7===null){$this->$y12->setCustomer(null);}$this->$y12=$j7;}public function isGliding():bool{return $this->$r14;}public function setGliding(bool $t3):void{$this->$o8->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::GLIDING,$t3);$this->$r14=$t3;}public function isSwimming():bool{return $this->$f15;}public function setSwimming(bool $p16):void{$this->$o8->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::SWIMMING,$p16);$this->$f15=$p16;}
        public function getThrownTridents():array{return $this->$g17;}public function addTrident(TridentEntity $h18):void{$this->$g17[$h18->getId()]=$h18;}public function removeTrident(TridentEntity $h18):void{if(isset($this->$g17[$h18->getId()]))unset($this->$g17[$h18->getId()]);}
        public static function playSound(Player|Vector3 $d5,string $i19,float $l20=1,float $r21=1,bool $e22=false):?DataPacket{$p23=$d5 instanceof Player?$d5->getPosition():$d5;$l24=new PlaySoundPacket();$l24->$x25=$i19;$l24->$g26=$p23->$g26;$l24->$g26=$p23->$g26;$l24->$g26=$p23->$g26;$l24->$j27=$l20;$l24->$s28=$r21;if($e22){return $l24;}elseif($d5 instanceof Player){$d5->getNetworkSession()->sendDataPacket($l24);}return null;}}?>
